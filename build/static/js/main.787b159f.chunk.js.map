{"version":3,"sources":["data/category.js","components/Hamburger.js","components/NavInshorts.js","components/NewsItem.js","components/News.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["categories","useStyles","makeStyles","list","width","paddingLeft","paddingRight","fullList","SwipeableTemporaryDrawer","anchor","setCategory","classes","React","useState","top","left","bottom","right","state","setState","toggleDrawer","open","event","type","key","Fragment","Button","onClick","SwipeableDrawer","onClose","onOpen","className","clsx","role","onKeyDown","List","ListItem","Divider","map","text","index","button","ListItemText","primary","NavInshorts","src","alt","NewsItem","author","title","description","url","urlToImage","source","publishedAt","style","fontWeight","cursor","href","textDecoration","color","Date","toGMTString","target","rel","News","articles","Container","maxWidth","element","name","App","category","setArticles","progress","setProgress","updateNews","a","fetch","data","json","parsedData","useEffect","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.787b159f.chunk.js","sourcesContent":["const categories = [\r\n    \"business\",\r\n    \"entertainment\",\r\n    \"general\",\r\n    \"health\",\r\n    \"science\",\r\n    \"sports\",\r\n    \"technology\",\r\n];\r\nexport default categories;","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport categories from \"../data/category\";\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 200,\r\n    paddingLeft: 10,\r\n    paddingRight: 5,\r\n  },\r\n  fullList: {\r\n    width: \"auto\",\r\n  },\r\n});\r\n\r\nexport default function SwipeableTemporaryDrawer({setCategory}) {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n \r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === \"top\" || anchor === \"bottom\",\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <List>\r\n        <ListItem>Categories</ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {categories.map((text, index) => (\r\n          <ListItem button key={text} onClick={() => setCategory(text)}>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <React.Fragment key={\"left\"}>\r\n        <Button onClick={toggleDrawer(\"left\", true)}>\r\n          <MenuIcon />\r\n        </Button>\r\n          <SwipeableDrawer\r\n            anchor={\"left\"}\r\n            open={state[\"left\"]}\r\n            onClose={toggleDrawer(\"left\", false)}\r\n            onOpen={toggleDrawer(\"left\", true)}\r\n          >\r\n            {list(\"left\")}\r\n          </SwipeableDrawer>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport Hamburger from './Hamburger'\r\nimport './NavInshorts.css'\r\n\r\nfunction NavInshorts({setCategory}) {\r\n    return (\r\n        <div className='nav'>\r\n           <div className=\"nav__icon\">\r\n               <Hamburger setCategory={setCategory}/>\r\n           </div>\r\n           <div className=\"nav__img\">\r\n               <img src=\"https://aroundsketch.github.io/Apple-App-Icons/App%20Icon/Apple/News/@PNG.png\" alt=\"Logo\" />\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavInshorts\r\n","import React from \"react\";\r\nimport \"./NewsItem.css\";\r\n\r\nfunction NewsItem({\r\n  author,\r\n  title,\r\n  description,\r\n  url,\r\n  urlToImage,\r\n  publishedAt,\r\n  source,\r\n}) {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={urlToImage} alt=\"This is Cover  Img\" />\r\n      <div className=\"card-body\">\r\n        <h3>{title}</h3>\r\n        <p>\r\n          <small>\r\n            <span style={{ fontWeight: \"800\", cursor: \"pointer\" }}>\r\n              <a href={url} style={{ textDecoration: \"none\", color: \"black\" }}>\r\n                shot\r\n              </a>\r\n            </span>{\" \"}\r\n            by {author} / {publishedAt = new Date().toGMTString()}\r\n          </small>\r\n        </p>\r\n        <p>{description}</p>\r\n        <a\r\n          href={url}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          style={{ color: \"black\", textDecoration: \"none\",}}\r\n        >\r\n          Read More at <b>{source}</b>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewsItem;\r\n","import { Container } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./News.css\";\r\nimport NewsItem from \"./NewsItem\";\r\n\r\nfunction News({ articles }) {\r\n  return (\r\n    <div className=\"news\">\r\n      <Container maxWidth=\"md\">\r\n        {/* <div className=\"inshortsAd\">\r\n          <p>For the best experience use inshorts app on your smartphone</p>\r\n          <div className=\"ad-img\">\r\n            <img\r\n              className=\"appStore\"\r\n              src=\"https://assets.inshorts.com/website_assets/images/appstore.png\"\r\n              alt=\"Appstore\"\r\n            />\r\n            <img\r\n              className=\"playStore\"\r\n              src=\"https://assets.inshorts.com/website_assets/images/playstore.png\"\r\n              alt=\"Playstore\"\r\n            />\r\n          </div>\r\n        </div> */}\r\n        <div className=\"inshortsContent\">\r\n          {articles.map((element) => {\r\n            return (\r\n              <NewsItem\r\n                key={element.url}\r\n                title={\r\n                  element.title\r\n                    ? element.title\r\n                    : \"Sorry Title is not avaialble right now!\"\r\n                }\r\n                description={\r\n                  element.description\r\n                    ? element.description\r\n                    : \"Sorry Description is not available right now!\"\r\n                }\r\n                urlToImage={\r\n                  element.urlToImage\r\n                    ? element.urlToImage\r\n                    : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSMYvcPlOIwnYWv-V6j7H2HAhq6kDTWPgMQucNXF8jmJfNe6TNx-UpK6jSpjEBFsqShH2s&usqp=CAU\"\r\n                }\r\n                url={element.url}\r\n                publishedAt={\r\n                  element.publishedAt ? element.publishedAt : \"Unknown\"\r\n                }\r\n                author={element.author ? element.author : \"Unknown\"}\r\n                source={element.source.name ? element.source.name : \"Unknown\"}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        {/* <div className=\"inshortsAdMd\">\r\n          <p>For the best experience use inshorts app on your smartphone</p>\r\n          <div className=\"ad-img\">\r\n            <img\r\n              className=\"appStore\"\r\n              src=\"https://assets.inshorts.com/website_assets/images/appstore.png\"\r\n              alt=\"Appstore\"\r\n            />\r\n            <img\r\n              className=\"playStore\"\r\n              src=\"https://assets.inshorts.com/website_assets/images/playstore.png\"\r\n              alt=\"Playstore\"\r\n            />\r\n          </div>\r\n        </div> */}\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default News;\r\n","import React, {useState, useEffect} from 'react'\nimport './App.css';\nimport NavInshorts from './components/NavInshorts'\nimport News from './components/News'\nimport LoadingBar from 'react-top-loading-bar'\n\nfunction App() {\n  const [category, setCategory] = useState(\"general\");\n  const [articles, setArticles] = useState([]);\n  const [progress, setProgress] = useState(10)\n\n  const updateNews = async () =>{\n    setProgress(10)\n       let url = `https://saurav.tech/NewsAPI/top-headlines/category/${category}/in.json`;\n       let data = await fetch(url);\n       setProgress(40)\n       let parsedData = await data.json();\n       setProgress(70)\n       setArticles(parsedData.articles)\n       setProgress(100)\n  }\n  \n  useEffect(() => {\n    updateNews()\n    // console.log(articles);\n    // eslint-disable-next-line\n  }, [category]);\n  return (\n    <div className=\"app\">\n       <NavInshorts setCategory={setCategory}/>\n       <LoadingBar\n        color='#f11946'\n        progress={progress}\n       height={3}\n      />\n       <News articles={articles}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}